{% extends 'base.html.twig' %}

{% block title %}Carte du trajet - {{ trip.departurePoint }} → {{ trip.destination }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #map {
            height: 70vh;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border: 1px solid #e0e0e0;
            margin-bottom: 20px;
        }
        .map-container {
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
        .trip-info {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }
        .info-section {
            padding: 10px 0;
        }
        .info-section:not(:last-child) {
            border-bottom: 1px solid #e0e0e0;
        }
        .info-label {
            font-weight: 600;
            color: #1e88e5;
            min-width: 120px;
            display: inline-block;
        }
        .btn-back {
            transition: all 0.3s ease;
        }
        .btn-back:hover {
            transform: translateX(-3px);
            text-decoration: none;
        }
        .alert-map {
            border-left: 4px solid #ffc107;
        }
        .trip-header {
            color: #1e88e5;
        }
        .marker-info h5 {
            margin-bottom: 10px;
        }
        .marker-info p {
            margin-bottom: 5px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0 trip-header">
                    <i class="bi bi-map me-2"></i> 
                    Trajet: {{ trip.departurePoint }} → {{ trip.destination }}
                </h1>
                <a href="{{ path('app_trip_home') }}" class="btn btn-sm btn-outline-secondary btn-back">
                    <i class="bi bi-arrow-left me-1"></i> Retour à la liste
                </a>
            </div>

            <div class="trip-info">
                <div class="row">
                    <div class="col-md-6">
                        <div class="info-section">
                            <p class="mb-2"><span class="info-label">Date du trajet:</span> {{ trip.tripDate|date('d/m/Y') }}</p>
                        </div>
                        <div class="info-section">
                            <p class="mb-1"><span class="info-label">Départ:</span> {{ trip.departurePoint }}</p>
                            <p class="mb-0 text-muted ps-4"><i class="bi bi-clock me-1"></i> {{ trip.departureTime|date('H:i') }}</p>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="info-section">
                            <p class="mb-1"><span class="info-label">Destination:</span> {{ trip.destination }}</p>
                            {% if trip.returnTime %}
                                <p class="mb-0 text-muted ps-4"><i class="bi bi-clock me-1"></i> Retour à {{ trip.returnTime|date('H:i') }}</p>
                            {% endif %}
                        </div>
                        <div class="info-section">
                            <p class="mb-1"><span class="info-label">Places:</span> {{ trip.availableSeats }} disponible(s)</p>
                            <p class="mb-0">
                                <span class="info-label">Cotisation:</span> 
                                {% if trip.contribution %}
                                    {{ trip.contribution }} DNT
                                {% else %}
                                    <span class="text-success">Gratuit</span>
                                {% endif %}
                            </p>
                        </div>
                    </div>
                </div>
                
                {% if trip.relayPoints %}
                    <div class="info-section mt-3">
                        <h5 class="h6 mb-2">
                            <i class="bi bi-signpost-split me-2"></i>
                            <span class="info-label">Points de relais:</span>
                        </h5>
                        <p class="mb-0 ps-4">{{ trip.relayPoints }}</p>
                    </div>
                {% endif %}
            </div>

            {% if not trip.departureLat or not trip.departureLng or not trip.destinationLat or not trip.destinationLng %}
                <div class="alert alert-warning alert-map">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-exclamation-triangle-fill me-3 fs-4"></i>
                        <div>
                            <h5 class="alert-heading mb-2">Carte non disponible</h5>
                            <p class="mb-0">Les coordonnées GPS de ce trajet sont manquantes.</p>
                            <p class="mt-2 mb-0">
                                <a href="{{ path('app_trip_edit', {'id': trip.id}) }}" class="btn btn-sm btn-warning">
                                    <i class="bi bi-geo-alt me-1"></i> Ajouter les coordonnées manuellement
                                </a>
                            </p>
                        </div>
                    </div>
                </div>
            {% else %}
                <div class="map-container">
                    <div id="map"></div>
                    <div class="text-center text-muted small mt-2">
                        <i class="bi bi-info-circle me-1"></i> Cliquez sur les marqueurs pour plus d'informations
                    </div>
                </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {% if trip.departureLat and trip.departureLng and trip.destinationLat and trip.destinationLng %}
        <script>
            function initMap() {
                // Données du trajet
                const tripData = {
                    depLat: {{ trip.departureLat }},
                    depLng: {{ trip.departureLng }},
                    destLat: {{ trip.destinationLat }},
                    destLng: {{ trip.destinationLng }},
                    depName: '{{ trip.departurePoint|e('js') }}',
                    destName: '{{ trip.destination|e('js') }}',
                    depTime: '{{ trip.departureTime|date('H:i') }}',
                    returnTime: '{{ trip.returnTime ? trip.returnTime|date('H:i') : '' }}',
                    relayPoints: {{ trip.relayPoints ? trip.relayPoints|json_encode|raw : '[]' }}
                };

                // Création de la carte
                const map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 10,
                    center: {lat: tripData.depLat, lng: tripData.depLng},
                    mapTypeId: 'roadmap',
                    styles: [
                        {
                            "featureType": "poi",
                            "stylers": [{ "visibility": "off" }]
                        },
                        {
                            "featureType": "transit",
                            "elementType": "labels.icon",
                            "stylers": [{ "visibility": "off" }]
                        }
                    ]
                });

                // Marqueur de départ
                const departureMarker = new google.maps.Marker({
                    position: {lat: tripData.depLat, lng: tripData.depLng},
                    map: map,
                    title: 'Départ: ' + tripData.depName,
                    icon: {
                        url: 'https://maps.google.com/mapfiles/ms/icons/green-dot.png',
                        scaledSize: new google.maps.Size(40, 40)
                    }
                });

                // InfoWindow pour le départ
                const departureInfo = new google.maps.InfoWindow({
                    content: `
                        <div class="marker-info">
                            <h5 style="color: #1e88e5;">
                                <i class="bi bi-geo-alt-fill"></i> Départ
                            </h5>
                            <p><strong>Lieu:</strong> ${tripData.depName}</p>
                            <p><strong>Heure:</strong> ${tripData.depTime}</p>
                        </div>
                    `
                });

                // Marqueur d'arrivée
                const destinationMarker = new google.maps.Marker({
                    position: {lat: tripData.destLat, lng: tripData.destLng},
                    map: map,
                    title: 'Destination: ' + tripData.destName,
                    icon: {
                        url: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',
                        scaledSize: new google.maps.Size(40, 40)
                    }
                });

                // InfoWindow pour la destination
                const destinationInfo = new google.maps.InfoWindow({
                    content: `
                        <div class="marker-info">
                            <h5 style="color: #d32f2f;">
                                <i class="bi bi-geo-fill"></i> Destination
                            </h5>
                            <p><strong>Lieu:</strong> ${tripData.destName}</p>
                            ${tripData.returnTime ? `<p><strong>Retour:</strong> ${tripData.returnTime}</p>` : ''}
                        </div>
                    `
                });

                // Gestion des clics sur les marqueurs
                departureMarker.addListener('click', () => {
                    departureInfo.open(map, departureMarker);
                });

                destinationMarker.addListener('click', () => {
                    destinationInfo.open(map, destinationMarker);
                });

                // Tracer l'itinéraire
                const directionsService = new google.maps.DirectionsService();
                const directionsRenderer = new google.maps.DirectionsRenderer({
                    map: map,
                    suppressMarkers: true,
                    polylineOptions: {
                        strokeColor: '#1e88e5',
                        strokeOpacity: 0.8,
                        strokeWeight: 5
                    }
                });

                // Calcul de l'itinéraire
                directionsService.route({
                    origin: new google.maps.LatLng(tripData.depLat, tripData.depLng),
                    destination: new google.maps.LatLng(tripData.destLat, tripData.destLng),
                    travelMode: 'DRIVING'
                }, (response, status) => {
                    if (status === 'OK') {
                        directionsRenderer.setDirections(response);
                        
                        // Ajuster le zoom pour voir tout l'itinéraire
                        const bounds = new google.maps.LatLngBounds();
                        response.routes[0].legs.forEach(leg => {
                            bounds.extend(leg.start_location);
                            bounds.extend(leg.end_location);
                        });
                        map.fitBounds(bounds);
                    } else {
                        console.error('Directions request failed:', status);
                        // Fallback: ligne droite entre départ et destination
                        new google.maps.Polyline({
                            path: [
                                {lat: tripData.depLat, lng: tripData.depLng},
                                {lat: tripData.destLat, lng: tripData.destLng}
                            ],
                            geodesic: true,
                            strokeColor: '#1e88e5',
                            strokeOpacity: 0.8,
                            strokeWeight: 5,
                            map: map
                        });
                        
                        // Ajuster le zoom pour voir les deux points
                        const bounds = new google.maps.LatLngBounds();
                        bounds.extend(departureMarker.getPosition());
                        bounds.extend(destinationMarker.getPosition());
                        map.fitBounds(bounds);
                    }
                });

                // Ouvrir automatiquement les infobulles
                setTimeout(() => {
                    departureInfo.open(map, departureMarker);
                    setTimeout(() => {
                        departureInfo.close();
                        destinationInfo.open(map, destinationMarker);
                    }, 3000);
                }, 1000);
            }

            // Gestion des erreurs de chargement de l'API Google Maps
            window.gm_authFailure = function() {
                document.getElementById('map').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-octagon-fill me-2"></i>
                        Erreur de chargement de Google Maps. Vérifiez votre connexion internet.
                    </div>
                `;
            };
        </script>
        
        <!-- Chargement de l'API Google Maps -->
        <script src="https://maps.googleapis.com/maps/api/js?key={{ google_maps_api_key }}&callback=initMap&libraries=places,directions" async defer></script>
    {% endif %}
{% endblock %}