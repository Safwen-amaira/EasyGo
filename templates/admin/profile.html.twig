{% extends 'admin/dashboard.html.twig' %}

{% block content %}
<div class="form-container">
    <h1><i class="fas fa-user-circle"></i> My Profile</h1>
    <div id="profile-alert" class="alert" style="display: none;"></div>
    <form id="profile-form">
        <div class="form-group">
            <label>First Name (Nom):</label>
            <input type="text" id="nom" name="nom" class="form-control" required>
        </div>

        <div class="form-group">
            <label>Last Name (Prenom):</label>
            <input type="text" id="prenom" name="prenom" class="form-control" required>
        </div>

        <div class="form-group">
            <label>Phone Number:</label>
            <input type="tel" id="phone" name="phone" class="form-control" 
                   pattern="[0-9]+" title="Numbers only" required>
        </div>

        <div class="form-group">
            <label>Bio:</label>
            <textarea id="bio" name="bio" class="form-control" rows="3" required></textarea>
        </div>

        <div class="form-group">
            <label>Requirements:</label>
            <textarea id="requirements" name="requirements" class="form-control" rows="3"></textarea>
        </div>

        <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Save Profile
        </button>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const user = JSON.parse(localStorage.getItem('user'));
    const form = document.getElementById('profile-form');
    const alertDiv = document.getElementById('profile-alert');
    const userId = user?.id;
    
    if (!userId) {
        showAlert('User ID not found!', 'danger');
        return;
    }

    // Load existing profile
    fetch(`/api/profile?userId=${userId}`)
    .then(response => {
        if (!response.ok) throw new Error('Profile load failed');
        return response.json();
    })
    .then(data => {
        if (data.exists) {
            document.getElementById('nom').value = data.nom || '';
            document.getElementById('prenom').value = data.prenom || '';
            document.getElementById('phone').value = data.phone || '';
            document.getElementById('bio').value = data.bio || '';
            document.getElementById('requirements').value = data.requirements || '';
        }
    })
    .catch(error => showAlert('Failed to load profile: ' + error.message, 'danger'));

    // Handle form submission
    form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const phoneValue = document.getElementById('phone').value;
        if (!/^\d+$/.test(phoneValue)) {
            showAlert('Phone number must contain only numbers', 'danger');
            return;
        }

        const formData = {
            userId: userId,
            nom: document.getElementById('nom').value.trim(),
            prenom: document.getElementById('prenom').value.trim(),
            phone: parseInt(phoneValue),
            bio: document.getElementById('bio').value.trim(),
            requirements: document.getElementById('requirements').value.trim()
        };

        // Validate required fields
        if (!formData.nom || !formData.prenom || isNaN(formData.phone)) {
            showAlert('Please fill all required fields correctly', 'danger');
            return;
        }

        fetch('/api/profile', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(formData)
        })
        .then(async response => {
            const text = await response.text();
            try {
                return JSON.parse(text);
            } catch {
                throw new Error(text);
            }
        })
        .then(data => {
            if (data.success) {
                showAlert('Profile saved successfully!', 'success');
            } else {
                throw new Error(data.error || 'Unknown error');
            }
        })
        .catch(error => showAlert('Error: ' + error.message, 'danger'));
    });

    function showAlert(message, type) {
        alertDiv.textContent = message;
        alertDiv.className = `alert alert-${type}`;
        alertDiv.style.display = 'block';
        setTimeout(() => alertDiv.style.display = 'none', 5000);
    }
});
</script>
{% endblock %}