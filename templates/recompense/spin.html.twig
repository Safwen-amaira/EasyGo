<h1>🎡 Tournez la roue !</h1>

<canvas id="spinWheel" width="400" height="400"></canvas>
<br>
<button onclick="spin()">🎯 Lancer la roue</button>

<script>
let segments = [];
const userId = 2;
let spinning = false;

// Fetch rewards
fetch('/recompense/spin/rewards')
    .then(response => response.json())
    .then(data => {
        segments = data;
        drawWheel();
    });

let currentAngle = 0;
let selectedIndex = -1;

function drawWheel(angle = 0) {
    const canvas = document.getElementById('spinWheel');
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, 400, 400);

    const total = segments.length;
    const arcSize = (2 * Math.PI) / total;

    for (let i = 0; i < total; i++) {
        const start = angle + arcSize * i;
        const end = angle + arcSize * (i + 1);
        ctx.beginPath();
        ctx.moveTo(200, 200);
        ctx.arc(200, 200, 200, start, end);
        ctx.fillStyle = `hsl(${(i * 360 / total)}, 70%, 70%)`;
        ctx.fill();
        ctx.stroke();

        // Text
        const textAngle = start + arcSize / 2;
        ctx.fillStyle = '#000';
        ctx.font = '14px sans-serif';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(segments[i], 200 + 120 * Math.cos(textAngle), 200 + 120 * Math.sin(textAngle));
    }

    // Arrow
    ctx.fillStyle = 'red';
    ctx.beginPath();
    ctx.moveTo(200, 0);
    ctx.lineTo(190, 20);
    ctx.lineTo(210, 20);
    ctx.fill();
}

function spin() {
    if (spinning || segments.length === 0) return alert("⚠️ Aucune récompense disponible !");
    spinning = true;

    const arcSize = (2 * Math.PI) / segments.length;
    const fullTurns = 5;
    const randomAngle = Math.random() * 2 * Math.PI;
    const finalAngle = fullTurns * 2 * Math.PI + randomAngle;

    const duration = 4000;
    const start = performance.now();

    function animate(now) {
        const elapsed = now - start;
        const progress = Math.min(elapsed / duration, 1);
        const easedProgress = easeOutCubic(progress);
        currentAngle = easedProgress * finalAngle;

        drawWheel(currentAngle);

        if (progress < 1) {
            requestAnimationFrame(animate);
        } else {
            // Normalize angle between 0 and 2*PI
            const normalized = (2 * Math.PI - (currentAngle % (2 * Math.PI))) % (2 * Math.PI);
const actualIndex = Math.floor(normalized / arcSize) % segments.length;

            const selectedReward = segments[actualIndex];

            fetch('/recompense/spin', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: userId, reward: selectedReward })
            })
            .then(response => response.json())
            .then(data => {
                alert("🎉 Récompense attribuée : " + data.recompense);
                spinning = false;
            });
        }
    }

    requestAnimationFrame(animate);
}

function easeOutCubic(t) {
    return (--t) * t * t + 1;
}
</script>
