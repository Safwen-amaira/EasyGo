{% extends 'base.html.twig' %}

{% block title %}Contrats{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1>Liste des Contrats</h1>
    {# Zone de notification des contrats expirants bientôt #}
    <div id="notification-container" class="alert alert-warning d-none" role="alert">
        <strong>Attention :</strong> Certains contrats expirent bientôt !
        <ul id="notification-list" class="mb-0 mt-2"></ul>
    </div>

        <input type="text" id="search" class="form-control mb-3" placeholder="Rechercher un véhicule...">

        <div class="card p-4">
            <table class="table table-striped" id="contrat-table">
                <thead>
                <tr>
                        <th>Nom</th>
                        <th>fournisseur_service</th>
                        <th>Téléphone</th>
                         <th>
                            
                            <button id="sort-type" class="btn btn-link btn-sm">⬇</button> <!-- bouton pour trier par type de contrat -->
                     <br>
                       service_inclus
                        </th>
                        <th>Date  début </th>
                        <th>
                             <button id="sort-date" class="btn btn-link btn-sm">⬇</button> <!-- bouton pour trier -->
                           <br> Date fin
                        </th>
                        <th>type_contrat</th>
                        <th>IDVehicule</th>
                        
                    </tr>
                    
                </thead>
                <tbody id="vehicule-table-body">
                    {% for contrat in contrats %}
                        <tr>
                            
                            <td>{{ contrat.nomprenom }}</td>
                            <td>{{ contrat.adresse }}</td>
                            <td>{{ contrat.telephone }}</td>
                            <td>{{ contrat.typeContrat }}</td>
                            <td>{{ contrat.dateDebut ? contrat.dateDebut|date('Y-m-d') : '' }}</td>
                            <td>{{ contrat.dateFin ? contrat.dateFin|date('Y-m-d') : '' }}</td>
                            <td>{{ contrat.description }}</td>
                            <td>{{ contrat.vehicule.id }}</td>



                            <td>
                                <a href="{{ path('app_contrat_show', {'id': contrat.id}) }}" class="btn btn-info btn-sm">Voir</a>
                                <a href="{{ path('app_contrat_edit', {'id': contrat.id}) }}" class="btn btn-warning btn-sm">Modifier</a>
                            </td>
                           
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="10" class="text-center">Aucun contrat trouvé</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>

        </div>
      <div>
       <a href="{{ path('app_contrat_generate_pdf') }}" class="btn btn-primary">Télécharger  en PDF</a>
       </div>

        <div class="mt-4">
            <a href="{{ path('app_contrat_new') }}" class="btn btn-success">Créer un nouveau contrat</a>
        </div>
    </div>
     <script src="https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js"></script>

    <script>
       

        // Recherche AJAX
        document.getElementById('search').addEventListener('input', function() {
            const searchValue = this.value;

            fetch('{{ path('app_contrat_search') }}?search=' + encodeURIComponent(searchValue), {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                document.getElementById('vehicule-table-body').innerHTML = html;
            });
        });

        // Fonction de tri
        let sortAsc = true; // Variable pour alterner entre tri ascendant et descendant

        document.getElementById('sort-date').addEventListener('click', function() {
            const table = document.getElementById('contrat-table');
            const rows = Array.from(table.rows).slice(1); // Exclure la ligne d'en-tête
            const sortedRows = rows.sort(function(rowA, rowB) {
                const dateA = new Date(rowA.cells[5].innerText);
                const dateB = new Date(rowB.cells[5].innerText);

                if (sortAsc) {
                    return dateA - dateB; // Tri ascendant
                } else {
                    return dateB - dateA; // Tri descendant
                }
            });

            // Re-ajouter les lignes triées dans le tableau
            sortedRows.forEach(row => table.appendChild(row));

            // Alterner l'ordre du tri
            sortAsc = !sortAsc;
            document.getElementById('sort-date').innerText = sortAsc ? "⬇" : "⬆"; // Modifier l'icône du bouton
        });

        // Fonction de tri pour la colonne 'Type de contrat'
let sortAscType = true;

document.getElementById('sort-type').addEventListener('click', function() {
    const table = document.getElementById('contrat-table');
    const rows = Array.from(table.rows).slice(1); // Exclure la ligne d'en-tête
    const sortedRows = rows.sort(function(rowA, rowB) {
        const typeA = rowA.cells[4].innerText.toLowerCase(); // Type de contrat en colonne 4
        const typeB = rowB.cells[4].innerText.toLowerCase();

        if (sortAscType) {
            return typeA.localeCompare(typeB); // Tri ascendant par ordre alphabétique
        } else {
            return typeB.localeCompare(typeA); // Tri descendant par ordre alphabétique
        }
    });

    sortedRows.forEach(row => table.appendChild(row)); // Ajouter les lignes triées

    sortAscType = !sortAscType; // Alterner l'ordre du tri
    document.getElementById('sort-type').innerText = sortAscType ? "⬇" : "⬆"; // Modifier l'icône du bouton
});

document.addEventListener('DOMContentLoaded', function() {
    // Dès que la page est chargée, on appelle l'API pour vérifier les contrats expirants
    fetch('{{ path('api_contrat_expirant_bientot') }}')
        .then(response => response.json())
        .then(data => {
            if (data.length > 0) {
                // Montrer la div de notification
                const notificationContainer = document.getElementById('notification-container');
                const notificationList = document.getElementById('notification-list');
                
                notificationContainer.classList.remove('d-none');

                // Ajouter chaque contrat à la liste
                data.forEach(function(contrat) {
                    const li = document.createElement('li');
                    li.textContent = `${contrat.nomprenom} - expire le ${contrat.dateFin}`;
                    notificationList.appendChild(li);
                });
            }
        })
        .catch(error => console.error('Erreur lors de la récupération des contrats expirants:', error));
});
    </script>
{% endblock %}